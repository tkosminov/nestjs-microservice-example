upstream backend {
  server 127.0.0.1:8081;
}

server {
  listen 80;

  location / {
    add_header Cache-Control 'no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0';
    if_modified_since off;
    expires off;
    etag off;
    proxy_no_cache 1;
    proxy_cache_bypass 1;

    proxy_pass http://backend;
    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection 'upgrade';
    proxy_set_header Host $host;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    client_max_body_size 10g;
  }

  location = /healthz {
    access_log off;
    default_type text/plain;

    content_by_lua_block {
      local stream_sock = ngx.socket.tcp
      local sock, sockerr = stream_sock()

      if not sock then
        ngx.log(ngx.ERR, "failed to create stream socket: ", sockerr)

        ngx.status = ngx.HTTP_INTERNAL_SERVER_ERROR
        ngx.say("status: down")
        ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)

        return
      end

      local upok, uperr = sock:connect("127.0.0.1", 8081);

      if not upok then
        ngx.log(ngx.ERR, "upstream connection failure: ", uperr);

        ngx.status = ngx.HTTP_SERVICE_UNAVAILABLE
        ngx.say("status: down")
        ngx.exit(ngx.HTTP_SERVICE_UNAVAILABLE)

        return
      end

      sock:close()

      ngx.status = ngx.HTTP_OK
      ngx.say("status: up")
      ngx.exit(ngx.HTTP_OK)
    }
  }
}
